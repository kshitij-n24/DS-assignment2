syntax = "proto3";

package payment;

option go_package = "./";

// Authentication messages.
message AuthRequest {
  string username = 1;
  string password = 2;
}

message AuthResponse {
  bool success = 1;
  string token = 2;
  string message = 3;
}

// Balance messages.
message BalanceRequest {
  string token = 1;
}

message BalanceResponse {
  double balance = 1;
  string message = 2;
}

// Payment messages.
message PaymentRequest {
  string token = 1;
  string to_bank = 2;
  double amount = 3;
  string idempotency_key = 4;
  string recipient_account = 5;  // uniquely identifies the recipient account
}

message PaymentResponse {
  bool success = 1;
  string message = 2;
}

// Bank transaction messages.
message BankTransactionRequest {
  string transaction_id = 1;
  double amount = 2;
  string recipient_account = 3;  // indicates where funds should be transferred
}

message BankTransactionResponse {
  bool success = 1;
  string message = 2;
}

// Registration messages.
message RegisterClientRequest {
  string username = 1;
  string password = 2;
  string bank_account = 3;
  double initial_balance = 4;
}

message RegisterClientResponse {
  bool success = 1;
  string message = 2;
}

// Search messages.
message SearchAccountsRequest {
  string query = 1;
}

message AccountInfo {
  string username = 1;
  string bank_account = 2;
  double balance = 3;
}

message SearchAccountsResponse {
  repeated AccountInfo accounts = 1;
}

// The Payment Gateway service.
service PaymentGateway {
  rpc RegisterClient(RegisterClientRequest) returns (RegisterClientResponse);
  rpc Authenticate(AuthRequest) returns (AuthResponse);
  rpc GetBalance(BalanceRequest) returns (BalanceResponse);
  rpc ProcessPayment(PaymentRequest) returns (PaymentResponse);
  rpc SearchAccounts(SearchAccountsRequest) returns (SearchAccountsResponse);
}

// The Bank service.
service BankService {
  rpc PrepareTransaction(BankTransactionRequest) returns (BankTransactionResponse);
  rpc CommitTransaction(BankTransactionRequest) returns (BankTransactionResponse);
  rpc AbortTransaction(BankTransactionRequest) returns (BankTransactionResponse);
}
